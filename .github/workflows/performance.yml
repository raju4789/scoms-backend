name: ⚡ Performance Tests

on:
  schedule:
    # Run performance tests daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'package.json'

jobs:
  performance-test:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: scoms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      consul:
        image: consul:1.15
        ports:
          - 8500:8500

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for app to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: scoms_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          CONSUL_HOST: localhost
          CONSUL_PORT: 8500

      - name: 📊 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ⚡ Run performance tests
        run: |
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';

          export let errorRate = new Rate('errors');

          export let options = {
            stages: [
              { duration: '2m', target: 100 }, // Ramp up
              { duration: '5m', target: 100 }, // Stay at 100 users
              { duration: '2m', target: 200 }, // Ramp up to 200
              { duration: '5m', target: 200 }, // Stay at 200 users
              { duration: '2m', target: 0 },   // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95% of requests must be below 500ms
              http_req_failed: ['rate<0.1'],   // Error rate must be below 10%
            },
          };

          const BASE_URL = 'http://localhost:3000';

          export default function() {
            // Health check
            let healthRes = http.get(`${BASE_URL}/health`);
            check(healthRes, {
              'health status is 200': (r) => r.status === 200,
            });

            // Get warehouses
            let warehousesRes = http.get(`${BASE_URL}/api/warehouses`);
            check(warehousesRes, {
              'warehouses status is 200': (r) => r.status === 200,
              'warehouses response time < 200ms': (r) => r.timings.duration < 200,
            });

            // Get orders
            let ordersRes = http.get(`${BASE_URL}/api/orders`);
            check(ordersRes, {
              'orders status is 200': (r) => r.status === 200,
              'orders response time < 300ms': (r) => r.timings.duration < 300,
            });

            errorRate.add(healthRes.status !== 200 || warehousesRes.status !== 200 || ordersRes.status !== 200);
            
            sleep(1);
          }
          EOF

          k6 run --out json=performance-results.json performance-test.js

      - name: 📊 Process performance results
        run: |
          node -e "
          const fs = require('fs');
          const results = fs.readFileSync('performance-results.json', 'utf8')
            .split('\n')
            .filter(line => line.trim())
            .map(line => JSON.parse(line))
            .filter(entry => entry.type === 'Point' && entry.metric === 'http_req_duration');
          
          const durations = results.map(r => r.data.value);
          const avg = durations.reduce((a, b) => a + b, 0) / durations.length;
          const p95 = durations.sort((a, b) => a - b)[Math.floor(durations.length * 0.95)];
          
          console.log('📊 Performance Summary:');
          console.log('Average Response Time:', avg.toFixed(2), 'ms');
          console.log('95th Percentile:', p95.toFixed(2), 'ms');
          console.log('Total Requests:', durations.length);
          "

      - name: 📤 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

      - name: 🚨 Performance alert
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚡ Performance degradation detected',
              body: `Performance tests failed on ${new Date().toISOString()}. Please check the workflow logs for details.`,
              labels: ['performance', 'bug', 'high-priority']
            })
